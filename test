 constructor(props) {
    super(props);
    this.state = {
      YearOptions: [], //added Year By #Year
      dummyItems: [], //added Year By #Year
      selectedYear: "", //added Year By #Year
    };

private getCurrentFiscalYear = () => {
    const today = new Date();
    const fiscalYearStartMonth = 6; // July is month 6 (zero-based index)
    let fiscalYear;
    if (today.getMonth() + 1 >= fiscalYearStartMonth) {
      fiscalYear = `${today.getFullYear().toString().slice(-2)}-${(
        today.getFullYear() + 1
      )
        .toString()
        .slice(-2)}`;
    } else {
      fiscalYear = `${(today.getFullYear() - 1).toString().slice(-2)}-${today
        .getFullYear()
        .toString()
        .slice(-2)}`;
    }
    this.setState({ selectedYear: `FY ${fiscalYear}` });
    // return `FY ${fiscalYear}`;
    this.getItems();
  };

 private parseFinancialYear(fyString) {
    let yearPart = fyString.split(" ")[1];
    return parseInt(yearPart, 10);
  }

  private getItems = () => {
    if (
      this.props.userRights.isAdmin ||
      this.props.userRights.isMember ||
      this.props.userRights.isVisitor
    ) {
      let selectFields = [
        "Id",
        "NameOfIssuerParentEntity",
        "LeadEngagementPartner/Title",
        "LeadEngagementPartner/EMail",
        "LeadAuditSeniorManager/Title",
        "FormStatus",
        "Designee/Title",
        "Modified",
        "EQRPartner/Title",
        "Designee/EMail",
        "Title",
        "Year", //added Year By #Year
      ];
      let query = sp.web.lists
        .getByTitle(Constants.PCAOBListName)
        .items.select(selectFields.join(","))
        .expand(
          "Designee, LeadEngagementPartner, EQRPartner, LeadAuditSeniorManager"
        );
      let filter: string =
        "FormStatus ne '" +
        Constants.formStatus.archived +
        "'" +
        " and FormStatus ne '" +
        Constants.formStatus.deleted +
        "'";
      if (this.props.userRights.isMember) {
        filter +=
          " and (Designee/EMail eq '" +
          this.props.context.pageContext.user.email +
          "' or LeadEngagementPartner/EMail eq '" +
          this.props.context.pageContext.user.email +
          "')";
      }
      this.setState({ isLoading: true });

      let finalYearData: any = []; //added Year By #Year
      const uniqueYears = new Set(); //added Year By #Year

      query
        .filter(filter)
        .top(2000)
        .orderBy("Modified", false)
        .get()
        .then((resp) => {
          let items: IPCAOBItem[] = [];
          resp.map((item) => {
            items.push({
              Id: item.Id,
              NameOfIssuerParentEntity: item.NameOfIssuerParentEntity,
              LeadEngagementPartner:
                item.LeadEngagementPartner && item.LeadEngagementPartner.Title,
              LeadEngagementPartnerMail:
                item.LeadEngagementPartner && item.LeadEngagementPartner.EMail,
              LeadAuditSeniorManager:
                item.LeadAuditSeniorManager &&
                item.LeadAuditSeniorManager.Title,
              FormStatus: item.FormStatus,
              Designee: item.Designee && item.Designee.Title,
              Modified: item.Modified,
              EQRPartner: item.EQRPartner && item.EQRPartner.Title,
              DesigneeMail: item.Designee && item.Designee.EMail,
              Title: item.Title, //added Year By #Year
              Year: item.Year, //added Year By #Year
            });
            if (item.Year) {
              uniqueYears.add(item.Year); //added Year By #Year
            }
          });
          //added Year By #Year starts
          uniqueYears.forEach((year) => {
            finalYearData.push({ key: year, text: year.toString() });
          });

          finalYearData.sort(
            (a, b) =>
              this.parseFinancialYear(b.key) - this.parseFinancialYear(a.key)
          );

          const filteredItems = items.filter(
            (each) => each.Year === this.state.selectedYear
          );

          this.setState({
            items: filteredItems,
            dummyItems: items,
            isLoading: false,
            YearOptions: finalYearData,
          });
          //added Year By #Year ends

          // const dummyItems = this.state.dummyItems.filter(
          //   (each) => each.Year !== this.state.selectedYear
          // );
        })
        .catch((ex) => {
          console.log("Faied to get items", ex);
          this.setState({ items: [], isLoading: false });
        });
    }
  };

 <Dropdown
              onChange={(e, option) => {
                const filteredItems = this.state.dummyItems.filter(
                  (each) => each.Year === option.text
                );
                this.setState({
                  selectedYear: option.text,
                  items: filteredItems,
                });
              }}
              selectedKey={this.state.selectedYear}
              placeholder="Year"
              options={this.state.YearOptions}
              styles={this.dropdownStyles}
              style={{ outlineColor: "transparent", width: "150px" }}
            />
